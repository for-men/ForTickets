version: '3.8'

services:
  eureka:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: eureka
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/eureka
    platform: linux/amd64
    ports:
      - '12001:12001'
    environment:
      - SERVICE_NAME=eureka
    networks:
      - service-network

  gateway-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: gateway-service
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/gateway-service
    platform: linux/amd64
    ports:
      - '12011:12011'
    environment:
      - SPRING_CLOUD_GATEWAY_DISCOVERY_CLIENT_ENABLED=true
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:12001/eureka/
      - SPRING_KAFKA_BOOTSTRAPSERVERS=kafka:29092
      - SERVICE_NAME=gateway-service
    depends_on:
      - eureka
    networks:
      - service-network

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: user-service
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/user-service
    platform: linux/amd64
    ports:
      - '12021:12021'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/fortickets
      - SPRING_DATASOURCE_USERNAME=forman
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:12001/eureka/
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SERVICE_NAME=user-service
    depends_on:
      - postgres-user
      - eureka
      - redis
    networks:
      - service-network



  postgres-user:
    image: postgres:16.4
    environment:
      - POSTGRES_DB=fortickets
      - POSTGRES_PASSWORD=1234
      - POSTGRES_USER=forman
    ports:
      - '54322:5432'
    volumes:
      - ../db/user-service:/var/lib/postgresql/data
    networks:
      - service-network

  concert-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: concert-service
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/concert-service
    platform: linux/amd64
    ports:
      - '12031:12031'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-concert:5432/fortickets
      - SPRING_DATASOURCE_USERNAME=forman
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:12001/eureka/
      - SERVICE_NAME=concert-service
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - postgres-concert
      - eureka
    networks:
      - service-network


  postgres-concert:
    image: postgres:16.4
    environment:
      - POSTGRES_DB=fortickets
      - POSTGRES_PASSWORD=1234
      - POSTGRES_USER=forman
    ports:
      - '54323:5432'
    volumes:
      - ../db/concert-service:/var/lib/postgresql/data
    networks:
      - service-network

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-service
    image: ${ECR_REGISTRY}/${ECR_NAMESPACE}/order-service
    platform: linux/amd64
    ports:
      - '12041:12041'
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/fortickets
      - SPRING_DATASOURCE_USERNAME=forman
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:12001/eureka/
      - SPRING_KAFKA_BOOTSTRAPSERVERS=kafka:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SERVICE_NAME=order-service
    depends_on:
      - postgres-order
      - eureka
      - redis
      - kafka
    networks:
      - service-network

  postgres-order:
    image: postgres:16.4
    environment:
      - POSTGRES_DB=fortickets
      - POSTGRES_PASSWORD=1234
      - POSTGRES_USER=forman
    ports:
      - '54324:5432'
    volumes:
      - ../db/order-service:/var/lib/postgresql/data
    networks:
      - service-network

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411" # Zipkin UI에 접근할 포트
    networks:
      - service-network

  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - service-network


  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:29092,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - service-network

  # Redis for caching
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
    networks:
      - service-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: "false"
    networks:
      - service-network

networks:
  service-network:
    driver: bridge
